// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scaleway/opentelemetry-collector-scaleway/receiver/scwaudittrail (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination client_mock.go -package scwaudittrail . Client
//

// Package scwaudittrail is a generated GoMock package.
package scwaudittrail

import (
	reflect "reflect"

	v1alpha1 "github.com/scaleway/scaleway-sdk-go/api/audit_trail/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListEvents mocks base method.
func (m *MockClient) ListEvents(arg0 *v1alpha1.ListEventsRequest) (*v1alpha1.ListEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].(*v1alpha1.ListEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockClientMockRecorder) ListEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockClient)(nil).ListEvents), arg0)
}
